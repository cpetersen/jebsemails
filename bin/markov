#!/usr/bin/env ruby

require "buff"
require "marky_markov"
require "thor"

class Markov < Thor
  desc "from", "Print all from email addresses in all pst files"
  def from
    find_files.each do |pst_file|
      shell_command("java -jar target/scala-2.10/main-assembly-0.1.jar #{pst_file}")
    end
  end

  desc "bodies", "Print all from email bodies in all pst files from given addresses"
  method_option :emails, type: :array, aliases: "-e", required: true
  def bodies
    find_files.each do |pst_file|
      options[:emails].each do |email|
        shell_command("java -jar target/scala-2.10/main-assembly-0.1.jar #{pst_file} '#{email}'")
      end
    end
  end

  desc "build", "Build the dictionary"
  method_option :dict, type: :string, aliases: "-d"
  method_option :content, type: :string, aliases: "-c", required: true
  def build
    filename = options[:dict] || "output/dictionary"
    FileUtils.rm(filename) if File.exist?(filename)
    markov = MarkyMarkov::Dictionary.new(filename)
    markov.parse_file options[:content]
    markov.save_dictionary!
  end


  desc "generate", "Print all from email bodies in all pst files from given addresses"
  method_option :dict, type: :string, aliases: "-d"
  method_option :count, type: :numeric, aliases: "-c"
  def generate
    filename = options[:dict] || "output/dictionary"
    markov = MarkyMarkov::Dictionary.new(filename)
    (options[:count] || 1).times do
      puts markov.generate_n_sentences 1
    end
  end

  desc "buffer FILE", "Using sentences in a saved file, add those sentences to the given buffer account/profiles"
  method_option :token, type: :string, aliases: "-t", required: true
  method_option :profiles, type: :array, aliases: "-p", required: true
  def buffer(file)
    client = Buff::Client.new(options[:token])
    File.readlines(file).each do |line|
      puts line
      body = { text: line, profile_ids: options[:profiles] }
      client.create_update(body: body)
    end
  end

  desc "buffer_profiles", "Print the available profile ids"
  method_option :token, type: :string, aliases: "-t", required: true
  def buffer_profiles
    client = Buff::Client.new(options[:token])
    client.profiles.each do |profile|
      puts "#{profile.formatted_service} #{profile.id} #{profile.service_username}"
    end
  end

  no_tasks do
    def shell_command(command)
      output = []
      IO.popen(command).each do |line|
        puts line.chomp
        STDOUT.flush
        output << line.chomp
      end
      output
    end

    def find_files
      Dir.glob("**/*.pst")
    end
  end
end
Markov.start(ARGV)
